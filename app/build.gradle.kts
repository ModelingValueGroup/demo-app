/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7.1/userguide/building_java_projects.html
 */
import java.nio.file.Files
import java.nio.file.Paths
import java.util.*

val VERSION: String by project
val GROUP: String by project
val COMPANY: String by project
val CI: Boolean = "true".equals(System.getenv("CI"))
val TOKEN: String = System.getenv("TOKEN") ?: "DRY"
val GITHUB_REF: String = File(".git/HEAD").readLines()[0].replaceFirst(Regex("^ref: "), "")
val isMaster: Boolean = GITHUB_REF.equals("refs/heads/master")

fun bbbGroup(group: String): String {
    return if (CI && isMaster) group else "snapshots." + group
}

fun bbbVersion(version: String): String {
    return if (CI && isMaster) version else String.format("%08x", GITHUB_REF.hashCode()) + "-SNAPSHOT"
}

fun bbbRepo(group: String): String {
    return if (CI && isMaster) "$COMPANY/$group" else "$COMPANY/tmp-snapshots"
}

fun bbbRef(ref: String): String {
    if (ref.startsWith("~")) {
        val parts = ref.substring(1).split(":")
        val g = bbbGroup(parts[0])
        val a = parts[1]
        val v = bbbVersion(parts[2])
        return "$g:$a:$v"
    } else {
        return ref
    }
}

fun fromProperties(dependencyHandlerScope: DependencyHandlerScope) {
    val props = Properties()
    Files.newInputStream(Paths.get("gradle.properties")).use {
        props.load(it)
    }
    val implementation = props.get("implementation") as? String
    if (implementation != null) {
        implementation.split(";").forEach { dependencyHandlerScope.implementation(bbbRef(it)) }
    }
    val testImplementation = props.get("testImplementation") as? String
    if (testImplementation != null) {
        testImplementation.split(";").forEach { dependencyHandlerScope.testImplementation(bbbRef(it)) }
    }
    val testRuntimeOnly = props.get("testRuntimeOnly") as? String
    if (testRuntimeOnly != null) {
        testRuntimeOnly.split(";").forEach { dependencyHandlerScope.testRuntimeOnly(bbbRef(it)) }
    }
}

group = bbbGroup(GROUP)
version = bbbVersion(VERSION)
val packageRepo = bbbRepo(GROUP)

println("@@@@@@@@@@@     GITHUB_REF=$GITHUB_REF")
println("@@@@@@@@@@@        version=$version")
println("@@@@@@@@@@@          group=$group")
println("@@@@@@@@@@@    packageRepo=$packageRepo")

plugins {
    application
    `maven-publish`
}

repositories {
    jcenter()
    mavenLocal()
    maven {
        url = uri("https://maven.pkg.github.com/$COMPANY")
        credentials {
            username = "" // can be anything but plugin requires it
            password = TOKEN
        }
    }
}

dependencies {
    fromProperties(this)
}

application {
    mainClass.set("demo.app.App")
}

tasks.test {
    useJUnitPlatform()
}
